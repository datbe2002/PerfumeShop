// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//Enum for database entities

enum Role {
  ADMIN
  MANAGER
  CUSTOMER
  GUEST
}

enum OrderStatus {
  PENDING
  SHIPPED
  COMPLETED
  CANCELED
}

enum PromotionStatus {
  ACTIVE
  EXPIRED
  UPCOMING
}

//End Enum for database entities

// Model schema for database

model User {
  id          String   @id @default(uuid()) @db.Uuid
  username    String   @unique
  email       String   @unique
  password    String
  role        Role
  name        String?
  phoneNumber String?
  address     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orders  Order[]
  reviews Review[]
}

model ProductImage {
  id        String  @id @default(uuid()) @db.Uuid
  productId String  @db.Uuid
  imageUrl  String
  isMain    Boolean @default(false)

  product Product @relation(fields: [productId], references: [id])
}

model Product {
  id          String    @id @default(uuid()) @db.Uuid
  name        String
  description String?
  price       Float
  salePrice   Float?
  onSale      Boolean   @default(false)
  saleStart   DateTime?
  saleEnd     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  category      Category           @relation(fields: [categoryId], references: [id])
  categoryId    String             @db.Uuid
  reviews       Review[]
  productImages ProductImage[]
  promotions    ProductPromotion[]
  OrderLine     OrderLine[]
}

model Order {
  id          String      @id @default(uuid()) @db.Uuid
  userId      String      @db.Uuid
  totalAmount Float
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())

  user       User        @relation(fields: [userId], references: [id])
  orderLines OrderLine[]
}

model OrderLine {
  id              String @id @default(uuid()) @db.Uuid
  orderId         String @db.Uuid
  productId       String @db.Uuid
  quantity        Int
  priceAtPurchase Float

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Category {
  id          String  @id @default(uuid()) @db.Uuid
  name        String
  description String?

  products Product[]
}

model Promotion {
  id                 String          @id @default(uuid()) @db.Uuid
  name               String
  discountPercentage Float
  startDate          DateTime
  endDate            DateTime
  status             PromotionStatus @default(ACTIVE)

  products ProductPromotion[]
}

model ProductPromotion {
  productId   String  @db.Uuid
  promotionId String  @db.Uuid

  product   Product   @relation(fields: [productId], references: [id])
  promotion Promotion @relation(fields: [promotionId], references: [id])

  @@id([productId, promotionId]) // Composite primary key
}

model Review {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  productId String   @db.Uuid
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}
